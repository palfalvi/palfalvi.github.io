<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shiny on R for Biology</title>
    <link>/categories/shiny/</link>
    <description>Recent content in Shiny on R for Biology</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Gergo Palfalvi</copyright>
    <lastBuildDate>Thu, 09 Mar 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/categories/shiny/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Local BLAST from R</title>
      <link>/post/local-blast-from-r/</link>
      <pubDate>Thu, 09 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/local-blast-from-r/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;
&lt;p&gt;In the &lt;a href=&#34;https://palfalvi.github.io/post/shiny-website-for-primer-documentation/&#34;&gt;previous post&lt;/a&gt; I discussed a bigger project, now let’s see a smaller part of it. &lt;a href=&#34;https://blast.ncbi.nlm.nih.gov/Blast.cgi&#34;&gt;BLAST&lt;/a&gt; (or &lt;strong&gt;B&lt;/strong&gt;asic &lt;strong&gt;L&lt;/strong&gt;ocal &lt;strong&gt;A&lt;/strong&gt;lignment &lt;strong&gt;S&lt;/strong&gt;earch &lt;strong&gt;T&lt;/strong&gt;ool) is defined on its webpage as:&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;&lt;strong&gt;BLAST&lt;/strong&gt; finds regions of similarity between biological sequences. The program compares nucleotide or protein sequences to sequence databases and calculates the statistical significance.&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;Most of the cases it is used for finding similar sequences (~genes) from other, well-annotated, online available organisms and in this case the web interface is perfect. However if we want to use for more heavy jobs or with custom databases, then there is an option to download executable and run in a local machine (or on a server of course). In our case the database will be built from the primers, which is only available locally, so we need to use this option. If you want to download follow the instructions &lt;a href=&#34;https://blast.ncbi.nlm.nih.gov/Blast.cgi?CMD=Web&amp;amp;PAGE_TYPE=BlastDocs&amp;amp;DOC_TYPE=Download&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;There is a also an &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/IEB/ToolBox/CPP_DOC/&#34;&gt;NCBI C++ toolkit&lt;/a&gt;, which contains a web BLAST API we could access through &lt;a href=&#34;http://dirk.eddelbuettel.com/code/rcpp.html&#34;&gt;Rcpp&lt;/a&gt;, but in that case we could only use the online available databases, which is not our purpose here.&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;As we installed we have access through &lt;code&gt;/path/to/blast/ncbi-blast-2.6.0+/bin/blastn&lt;/code&gt; for blastn (nucleotide BLAST). It is nice, but what we want is to control from R. If someone submit a sequence in the Shiny interface, that is sent to BLAST on the system, then the result come back to R. Fortunately in R there are some command for this, namely &lt;code&gt;system()&lt;/code&gt; and &lt;code&gt;system2()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The differences between the two generally is how to give the command line arguments. In &lt;code&gt;system()&lt;/code&gt;, you insert one string as you would do in a Unix-alike shell. In &lt;code&gt;system2()&lt;/code&gt; the &lt;code&gt;command&lt;/code&gt; argument holds only the command name you wish to run and the &lt;code&gt;arg&lt;/code&gt; argument contains a character vector of the command’s argument. Let me show in an example where you would like to run:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;&amp;gt;  /path/to/blast/ncbi-blast-2.6.0+/bin/blastn -db blast_database -query input.fasta -outfmt 6 -evalue 1e-6 -ungapped&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In R it looks like these.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;system(command = &amp;quot;/path/to/blast/ncbi-blast-2.6.0+/bin/blastn -db blast_database -query input.fasta -outfmt 6 -evalue 1e-6 -ungapped&amp;quot;)

system2(command = &amp;quot;/path/to/blast/ncbi-blast-2.6.0+/bin/blastn&amp;quot;, 
        args = c(&amp;quot;-db blast_database -query input.fasta -outfmt 6 -evalue 10e-6 -ungapped&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The good point in &lt;code&gt;system2()&lt;/code&gt; is the possibility we can more easily manipulate the arguments (and the connection is also better).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;blastn = &amp;quot;/path/to/blast/ncbi-blast-2.6.0+/bin/blastn&amp;quot;
blast_db = &amp;quot;blast_database&amp;quot;
input = &amp;quot;input_file&amp;quot;
evalue = 1e-6
format = 6

system2(command = blastn, 
        args = c(&amp;quot;-db&amp;quot;, blast_db, 
                 &amp;quot;-query&amp;quot;, input, 
                 &amp;quot;-outfmt&amp;quot;, format, 
                 &amp;quot;-evalue&amp;quot;, evalue, 
                 &amp;quot;-ungapped&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is very promising so far, but we need to capture the output in R. For this we have to use &lt;code&gt;wait = TRUE&lt;/code&gt;. Then R will wait until this process is finished, not just send out the task and go on the next line. also set the &lt;code&gt;stdout&lt;/code&gt; (standard output) to capture the result as a character vector, otherwise it is sent to the R console. Let’s capture this in the &lt;code&gt;blast_out&lt;/code&gt; object.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;blast_out &amp;lt;- system2(command = blastn, 
                     args = c(&amp;quot;-db&amp;quot;, blast_db, 
                              &amp;quot;-query&amp;quot;, input, 
                              &amp;quot;-outfmt&amp;quot;, format, 
                              &amp;quot;-evalue&amp;quot;, evalue,
                              &amp;quot;-ungapped&amp;quot;),
                     wait = TRUE,
                     stdout = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So far so good, but if you look in the &lt;code&gt;blast_out&lt;/code&gt; object, it should look like something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[1] &amp;quot;Homo_Lin28A\tENST00000254231.4\t100.00\t207\t0\t0\t1\t207\t121\t327\t2e-110\t  398&amp;quot; 
[2] &amp;quot;Homo_Lin28A\tENST00000326279.10\t100.00\t207\t0\t0\t1\t207\t121\t327\t2e-110\t  398&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is not exactly what we wanted. We would like to have some kind of data frame, but as you can see the output is literally a tabular formatted output captured in a character vector. But no worries, we have some tricks here.&lt;/p&gt;
&lt;div id=&#34;classical-way&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;“Classical” way&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;textConnection&lt;/code&gt; function needs an input text, then it is copied to create a connection object. For detailed information write &lt;code&gt;?textConnection&lt;/code&gt;. From this connection we can use &lt;code&gt;read.table()&lt;/code&gt; to create a data frame.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;blast_out &amp;lt;- read.table(textConnection(blast_out))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we have a data frame with the blast output.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;p&gt;Surprisingly the &lt;code&gt;readr&lt;/code&gt; package (e.g. &lt;code&gt;read_tsv()&lt;/code&gt;) cannot read from this connection due to its non-binary state. (Or at least I could not figure out how.)&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;div id=&#34;the-tidy-way&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The “tidy” way&lt;/h2&gt;
&lt;p&gt;If we want to work and stay in the &lt;a href=&#34;http://tidyverse.org&#34;&gt;tidyverse&lt;/a&gt; and create a tibble, there are two options. The first is to follow the codes above and use &lt;code&gt;as_tibble()&lt;/code&gt; or from the original &lt;code&gt;blast_out&lt;/code&gt; character vector proceed with &lt;code&gt;as_tibble()&lt;/code&gt; and &lt;code&gt;separate()&lt;/code&gt; based on the &lt;code&gt;\t&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

tidy_blast &amp;lt;- blast_out %&amp;gt;% 
  textConnection() %&amp;gt;% 
  read.table() %&amp;gt;%
  as_tibble() &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or (Personally I like this the best)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt; colnames &amp;lt;- c(&amp;quot;qseqid&amp;quot;,
               &amp;quot;sseqid&amp;quot;,
               &amp;quot;pident&amp;quot;,
               &amp;quot;length&amp;quot;,
               &amp;quot;mismatch&amp;quot;,
               &amp;quot;gapopen&amp;quot;,
               &amp;quot;qstart&amp;quot;,
               &amp;quot;qend&amp;quot;,
               &amp;quot;sstart&amp;quot;,
               &amp;quot;send&amp;quot;,
               &amp;quot;evalue&amp;quot;,
               &amp;quot;bitscore&amp;quot;)
  
tidy_blast &amp;lt;- blast_out %&amp;gt;%
  as_tibble() %&amp;gt;% 
  separate(col = value, 
           into = colnames,
           sep = &amp;quot;\t&amp;quot;,
           convert = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great, now we have a nice data frame/tibble with all the blast outputs we can process, manipulate, plot, etc all in R.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tidy_blast&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 × 12
##        qseqid                 sseqid pident length mismatch gapopen qstart
## *       &amp;lt;chr&amp;gt;                  &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt;  &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt;
## 1 Homo_Lin28A  HomoENST00000254231.4    100    207        0       0      1
## 2 Homo_Lin28A HomoENST00000326279.10    100    207        0       0      1
## # ... with 5 more variables: qend &amp;lt;int&amp;gt;, sstart &amp;lt;int&amp;gt;, send &amp;lt;int&amp;gt;,
## #   evalue &amp;lt;dbl&amp;gt;, bitscore &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Put together all and we will got this, without any intermediate object.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;blastn = &amp;quot;/path/to/blast/ncbi-blast-2.6.0+/bin/blastn&amp;quot;
blast_db = &amp;quot;blast_database&amp;quot;
input = &amp;quot;input_file&amp;quot;
evalue = 1e-6
format = 6
colnames &amp;lt;- c(&amp;quot;qseqid&amp;quot;,
               &amp;quot;sseqid&amp;quot;,
               &amp;quot;pident&amp;quot;,
               &amp;quot;length&amp;quot;,
               &amp;quot;mismatch&amp;quot;,
               &amp;quot;gapopen&amp;quot;,
               &amp;quot;qstart&amp;quot;,
               &amp;quot;qend&amp;quot;,
               &amp;quot;sstart&amp;quot;,
               &amp;quot;send&amp;quot;,
               &amp;quot;evalue&amp;quot;,
               &amp;quot;bitscore&amp;quot;)

blast_out &amp;lt;- system2(command = &amp;quot;blastn&amp;quot;, 
                     args = c(&amp;quot;-db&amp;quot;, blast_db, 
                              &amp;quot;-query&amp;quot;, input, 
                              &amp;quot;-outfmt&amp;quot;, format, 
                              &amp;quot;-evalue&amp;quot;, evalue,
                              &amp;quot;-ungapped&amp;quot;),
                     wait = TRUE,
                     stdout = TRUE) %&amp;gt;%
  as_tibble() %&amp;gt;% 
  separate(col = value, 
           into = colnames,
           sep = &amp;quot;\t&amp;quot;,
           convert = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From here we can put all of these in a function, even extend the blast options on your wish and use in our everyday analysis or as me, put this on a Shiny website with some extra feature we will discuss later on. In the next post I plan to continue on the visualization of the blast output.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Shiny Website for Primer Documentation</title>
      <link>/post/shiny-website-for-primer-documentation/</link>
      <pubDate>Tue, 07 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/shiny-website-for-primer-documentation/</guid>
      <description>&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/vis/vis.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/vis/vis.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/visNetwork-binding/visNetwork.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;I am working in a relatively big molecular biology laboratory where sometimes the common stocks and orders documentation can be a hassle. Recently I ran into one of this problem and decided to change the way to maintain a documentation of our oligonucleotide storage.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;If you are not familiar with the term &lt;a href=&#34;https://en.wikipedia.org/wiki/Primer_(molecular_biology)&#34;&gt;&lt;em&gt;primer&lt;/em&gt;&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Oligonucleotide&#34;&gt;&lt;em&gt;oligonicleotide&lt;/em&gt;&lt;/a&gt;, start on Wikipedia.&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;Since we keep track every single ordered oligonucleotide this laboratory ordered, now there are more then 10.000 records. Until now they deployed to a shared Excel file on a common server. There was several problem with this method, let me highlight a few:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You have to manually add the unique identifier for the tube (a number, indicating the location to be stored). It resulted duplicated, skipped and even mistyped IDs.&lt;/li&gt;
&lt;li&gt;You have to write the sequence manually or with Copy-Paste.&lt;/li&gt;
&lt;li&gt;You can write any silly abbreviation for your name. Also can cause unidentifiable authors or authors with several types of entry names.&lt;/li&gt;
&lt;li&gt;If someone left it open on their machine, others cannot edit until it is not closed.&lt;/li&gt;
&lt;li&gt;Difficult to run BLAST. If a lab already has 10.000+ primers, sometimes you just look up what you need instead of ordering new ones. &lt;a href=&#34;https://blast.ncbi.nlm.nih.gov/Blast.cgi&#34;&gt;BLAST&lt;/a&gt; can do this job, but it is not so convenient to update a local BLAST database from excel every time someone deploy some new records (a few times a day).&lt;/li&gt;
&lt;li&gt;It is Excel.&lt;/li&gt;
&lt;li&gt;Again. It is Excel. Anyone easily could delete a few lines or even the whole document. No authorized access for any type of editing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Considering these, I decided to create a &lt;a href=&#34;http://shiny.rstudio.com&#34;&gt;Shiny&lt;/a&gt; webpage on our local server to automatically maintain and protect this database with some extra function and a highly user-friendly interface. I also would be able to distribute a backbone from this site on github if anyone has similar problems or just wants to use. Since this is a bigger project to put in one post and also some part is highly personalized to our laboratory, I will cover only some important parts, like some specific plotting and data processing, how to build up a shiny app within several posts.&lt;/p&gt;
&lt;div id=&#34;the-basic-ideas-behind-the-webpage&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The basic ideas behind the webpage&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;I would like to store the primer information in a database instead of a &lt;code&gt;.csv&lt;/code&gt; or &lt;code&gt;.xls&lt;/code&gt; file. My main candidates for this is &lt;a href=&#34;https://www.postgresql.org&#34;&gt;postgreSQL&lt;/a&gt; or &lt;a href=&#34;https://www.sqlite.org&#34;&gt;SQLite&lt;/a&gt;, but it could be changed freely later.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I want an interface where people can deploy primers even by manually or uploading a file (which is usually provided by the company we order from). This also should auto generate the unique IDs for the tubes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ability to build a BLAST database from the database (probably through a &lt;code&gt;.fasta&lt;/code&gt; file). This also should be triggered every time when new records are submitted (e.g. by button press or by monitoring the database time stamp).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ability to access the server’s BLAST engine from R/Shiny and to process the output in real time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A view window for browsing among existing primers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Following up on availability of the primer. If someone finished a tube, make it possible to indicate it with also a possible reordering option and connecting the unique IDs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Overcome all of the cons mentioned above.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here is a diagram (created with the &lt;a href=&#34;http://rich-iannone.github.io/DiagrammeR/&#34;&gt;DiagrammeR&lt;/a&gt; package) about the core ideas:&lt;/p&gt;
&lt;div id=&#34;htmlwidget-c990278410b71d556446&#34; style=&#34;width:672px;height:480px;&#34; class=&#34;visNetwork html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-c990278410b71d556446&#34;&gt;{&#34;x&#34;:{&#34;nodes&#34;:{&#34;id&#34;:[1,2,3,4,5,6,7],&#34;group&#34;:[&#34;A&#34;,&#34;A&#34;,&#34;A&#34;,&#34;A&#34;,&#34;A&#34;,&#34;A&#34;,&#34;B&#34;],&#34;label&#34;:[&#34;Primer Data Table \n (postgreSQL/\nSQLite)&#34;,&#34;New primer input&#34;,&#34;Create .fasta&#34;,&#34;Update blast database&#34;,&#34;BLAST search input&#34;,&#34;BLAST search output&#34;,&#34;Update&#34;],&#34;shape&#34;:[&#34;database&#34;,&#34;ellipse&#34;,&#34;box&#34;,&#34;box&#34;,&#34;ellipse&#34;,&#34;ellipse&#34;,&#34;circle&#34;],&#34;style&#34;:[&#34;filled&#34;,&#34;filled&#34;,&#34;filled&#34;,&#34;filled&#34;,&#34;filled&#34;,&#34;filled&#34;,&#34;filled&#34;],&#34;color&#34;:[&#34;limegreen&#34;,&#34;orange&#34;,&#34;dodgerblue&#34;,&#34;dodgerblue&#34;,&#34;orange&#34;,&#34;orange&#34;,&#34;pink&#34;],&#34;font.size&#34;:[20,20,20,20,20,20,20],&#34;shadow.enabled&#34;:[true,true,true,true,true,true,true],&#34;shadow.size&#34;:[10,10,10,10,10,10,10],&#34;shadow...&#34;:[&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;],&#34;shadow....1&#34;:[&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;],&#34;shadow....2&#34;:[&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;],&#34;shadow....3&#34;:[&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;],&#34;shadow....4&#34;:[&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;],&#34;smooth&#34;:[true,true,true,true,true,true,true],&#34;level&#34;:[1,4,2,2,4,4,3]},&#34;edges&#34;:{&#34;id&#34;:[1,2,3,4,5,6,7,8],&#34;from&#34;:[2,2,1,7,7,3,5,4],&#34;to&#34;:[1,7,3,3,4,4,4,6],&#34;label&#34;:[&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;]},&#34;nodesToDataframe&#34;:true,&#34;edgesToDataframe&#34;:true,&#34;options&#34;:{&#34;width&#34;:&#34;100%&#34;,&#34;height&#34;:&#34;100%&#34;,&#34;nodes&#34;:{&#34;shape&#34;:&#34;dot&#34;},&#34;manipulation&#34;:{&#34;enabled&#34;:false},&#34;edges&#34;:{&#34;arrows&#34;:{&#34;to&#34;:{&#34;enabled&#34;:true,&#34;scaleFactor&#34;:1}}},&#34;physics&#34;:{&#34;stabilization&#34;:{&#34;enabled&#34;:true,&#34;onlyDynamicEdges&#34;:false,&#34;fit&#34;:true}},&#34;layout&#34;:{&#34;improvedLayout&#34;:true,&#34;hierarchical&#34;:{&#34;enabled&#34;:true,&#34;levelSeparation&#34;:270,&#34;direction&#34;:&#34;LR&#34;,&#34;sortMethod&#34;:&#34;directed&#34;}}},&#34;groups&#34;:[&#34;A&#34;,&#34;B&#34;],&#34;width&#34;:null,&#34;height&#34;:null,&#34;idselection&#34;:{&#34;enabled&#34;:false},&#34;byselection&#34;:{&#34;enabled&#34;:false},&#34;main&#34;:null,&#34;submain&#34;:null,&#34;footer&#34;:null},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;extra-functions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Extra functions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Create new primers using &lt;a href=&#34;http://primer3.ut.ee&#34;&gt;Primer3&lt;/a&gt; (and BLAST) in-app. For this, we have to manipulate the UNIX command line application from R. Luckily it is not so difficult.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Extending this possibility we can even search for gRNAs for our CRISPR experiments with non-model genomes we work with. And also just for keep everything nicely in one place.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In the next post I would like to show how to recreate an interactive graphical output from a BLAST search result, similar as you can see on the &lt;a href=&#34;https://blast.ncbi.nlm.nih.gov/Blast.cgi&#34;&gt;BLAST&lt;/a&gt; website after performing a search.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
