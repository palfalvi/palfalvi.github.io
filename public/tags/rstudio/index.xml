<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rstudio on R for Biology</title>
    <link>/tags/rstudio/</link>
    <description>Recent content in Rstudio on R for Biology</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Gergo Palfalvi</copyright>
    <lastBuildDate>Wed, 13 Feb 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/rstudio/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Jellybean mistakes 2: Barplots</title>
      <link>/post/jellybean-mistakes-2-barplots/</link>
      <pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/jellybean-mistakes-2-barplots/</guid>
      <description>&lt;p&gt;Let’s dig into the problem of barplots and where to use them, but most importantly where to avoid them. First look into the &lt;code&gt;anscombe&lt;/code&gt; data to understand what is the problem with hiding the actual points and showing only a few ambiguous descriptive values about the dataset.&lt;/p&gt;
&lt;div id=&#34;the-problem-with-anscombes-quartet&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The problem with Anscombe’s quartet&lt;/h2&gt;
&lt;p&gt;Let’s start with putting the data in a more tidy shape.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ansc_tidy &amp;lt;- anscombe %&amp;gt;% 
  gather(axis, value) %&amp;gt;%
  separate(axis, c(&amp;quot;axis&amp;quot;, &amp;quot;group&amp;quot;), 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our data consist of four independent measurments (&lt;code&gt;group&lt;/code&gt;) which each consist of 2 connected points, x and y (&lt;code&gt;axis&lt;/code&gt;). Now let’s see what we have with a barplot and error bars showing the standard deviations.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ansc_tidy %&amp;gt;%
  ggplot(aes(x = group, y = value, fill = axis, color = axis)) +
  stat_summary(fun.y = &amp;quot;mean&amp;quot;, geom = &amp;quot;bar&amp;quot;, position = &amp;quot;dodge&amp;quot;, alpha = 0.2) + 
  stat_summary(geom = &amp;quot;errorbar&amp;quot;, fun.data = mean_se, position = position_dodge(0.9), width = 0.2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-02-13-jellybean-mistakes-2-barplots_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;That’s interesting, all 4 groups look identical for both x and y values in the case of mean and SD. But are they really that similar? Keep the barplots and put some jittered dot with the actual data on them.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ansc_tidy %&amp;gt;%
  ggplot(aes(x = group, y = value, fill = axis, color = axis)) +
  stat_summary(fun.y = &amp;quot;mean&amp;quot;, geom = &amp;quot;bar&amp;quot;, position = &amp;quot;dodge&amp;quot;, alpha = 0.2) + 
  stat_summary(geom = &amp;quot;errorbar&amp;quot;, fun.data = mean_se, position = position_dodge(0.9), width = 0.2) +
  geom_point(position = position_jitterdodge(jitter.width = 0.2, jitter.height = 0, dodge.width = 0.8))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-02-13-jellybean-mistakes-2-barplots_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now we can see some striking differences. The first and most strongest maybe is the 4th group’s x data, where the ponts are identical except one extreme value. As for the y data, you can see some more compressed data in the 2nd group and some outliers in the 3rd and 4th case.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;better-representation-of-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Better representation of data&lt;/h2&gt;
&lt;p&gt;The next question would be, if we cannot trust barplots with errorbars, what representation we should use. One better step is presented above, when you keep the barplots with error bars and plot the actual data on top of it.&lt;/p&gt;
&lt;div id=&#34;boxplots&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Boxplots&lt;/h3&gt;
&lt;p&gt;Maybe one of the best choice could be boxplots. There you plot much more descriptive values which are also less sensitive to outliers (mean vs median).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ansc_tidy %&amp;gt;%
  ggplot(aes(x = group, y = value, fill = axis, color = axis)) +
  geom_boxplot(alpha = 0.2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-02-13-jellybean-mistakes-2-barplots_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;One extra step can be if you add the raw data points here too.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ansc_tidy %&amp;gt;%
  ggplot(aes(x = group, y = value, fill = axis, color = axis)) +
  geom_boxplot(alpha = 0.2) +
  geom_point(position = position_jitterdodge(jitter.width = 0.1, jitter.height = 0, dodge.width = 0.8))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-02-13-jellybean-mistakes-2-barplots_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There is plenty of other solutions, like violin plots, but the concept is the same. Showing more information about your data, including more descriptive values and in optimal case the actual values can be much more beneficial for you and especially for the audience to explain, understand and explore your data.&lt;/p&gt;
&lt;p&gt;Also several other features were not discussed barplots+eroor bars can hide, for example sample size and confidence intervals.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;dont-leave-barplots&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Don’t leave barplots&lt;/h2&gt;
&lt;p&gt;If we cannot use barplots for such kind of population data without compromising the understanding, then where we can use barplots? Don’t worry, they have their own place.&lt;/p&gt;
&lt;p&gt;You can use barplots if you have count data, ratios or percentages. In this case, there will be no error bars.&lt;/p&gt;
&lt;p&gt;Let’s see a survival data, where we had 5 conditions, each with a starting population size inbetween 230 and 300. Then let’s generate the survived individuals between 20-80%. Add an extra twist, and select 10-90% of the survived ones as “positive” (for disease or transformation).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data &amp;lt;- tibble(group = 1:5,
               population = sample(230:300, 5)) %&amp;gt;%
  mutate(survived = round(population * sample(20:80, 5) / 100),
         positive = round(survived * sample(10:90, 5) / 100)) %&amp;gt;%
  mutate(negative = survived - positive,
         dead = population - survived) %&amp;gt;%
  select(group, dead, negative, positive) %&amp;gt;%
  gather(condition, number, -group)

data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 15 x 3
##    group condition number
##    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt;
##  1     1 dead         118
##  2     2 dead         129
##  3     3 dead         119
##  4     4 dead          96
##  5     5 dead          89
##  6     1 negative      63
##  7     2 negative      87
##  8     3 negative      17
##  9     4 negative     106
## 10     5 negative      47
## 11     1 positive      70
## 12     2 positive      36
## 13     3 positive     141
## 14     4 positive      57
## 15     5 positive     127&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data %&amp;gt;% 
  ggplot(aes(x = group, y = number, fill = condition, label = number)) +
  geom_bar(stat = &amp;quot;identity&amp;quot;, alpha = 0.8, position = &amp;quot;fill&amp;quot;) +
  geom_text(position = position_fill(vjust = .5)) +
  labs(title = &amp;quot;Survival rate&amp;quot;, x = &amp;quot;Group&amp;quot;, y = &amp;quot;Ratio of individuals&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-02-13-jellybean-mistakes-2-barplots_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-best-way-to-use-barplots&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The best way to use barplots&lt;/h2&gt;
&lt;p&gt;A similar problem, when we would like to plot exact values, for example heights of Simpson characters. In my opinion, this is the best usage so far. - Modified after &lt;a href=&#34;https://medium.com/human-in-a-machine-world/south-park-characters-in-ggplot2-2c5b05b19cc2&#34;&gt;this&lt;/a&gt; post.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;simpsons &amp;lt;- tribble(
  ~member, ~part, ~height,
  &amp;quot;Homer&amp;quot;, &amp;quot;homer_pants&amp;quot;, 51,
  &amp;quot;Homer&amp;quot;, &amp;quot;homer_shirt&amp;quot;, 51,
  &amp;quot;Homer&amp;quot;, &amp;quot;skin&amp;quot;, 65,
  &amp;quot;Marge&amp;quot;, &amp;quot;marge_dress&amp;quot;, 103,
  &amp;quot;Marge&amp;quot;, &amp;quot;skin&amp;quot;, 51, 
  &amp;quot;Marge&amp;quot;, &amp;quot;marge_hair&amp;quot;, 103,
  &amp;quot;Bart&amp;quot;, &amp;quot;bart_shorts&amp;quot;, 38,
  &amp;quot;Bart&amp;quot;, &amp;quot;bart_shirt&amp;quot;, 38,
  &amp;quot;Bart&amp;quot;, &amp;quot;skin&amp;quot;, 46,
  &amp;quot;Lisa&amp;quot;, &amp;quot;lisa_dress&amp;quot;, 72,
  &amp;quot;Lisa&amp;quot;, &amp;quot;skin&amp;quot;, 38,
  &amp;quot;Maggie&amp;quot;, &amp;quot;onesie&amp;quot;, 46,
  &amp;quot;Maggie&amp;quot;, &amp;quot;skin&amp;quot;, 18
) %&amp;gt;%
  mutate(member = member %&amp;gt;% fct_relevel(c(&amp;quot;Homer&amp;quot;,&amp;quot;Marge&amp;quot;,&amp;quot;Bart&amp;quot;,&amp;quot;Lisa&amp;quot;,&amp;quot;Maggie&amp;quot;)),
         part = part %&amp;gt;% fct_relevel(c(&amp;quot;marge_hair&amp;quot;,&amp;quot;skin&amp;quot;, &amp;quot;homer_pants&amp;quot;,&amp;quot;homer_shirt&amp;quot;,  
                     &amp;quot;marge_dress&amp;quot;,  
                     &amp;quot;bart_shirt&amp;quot;, &amp;quot;bart_shorts&amp;quot;, 
                     &amp;quot;lisa_dress&amp;quot;,  
                     &amp;quot;onesie&amp;quot;)))


ggplot(data = simpsons, mapping = aes(x=member, y=height, fill=part)) +   
   geom_bar(stat=&amp;quot;identity&amp;quot;, show.legend = FALSE) +   
   scale_fill_manual(values=c(&amp;quot;#107DC0&amp;quot;,&amp;quot;#FED90F&amp;quot;,&amp;quot;#FFFFFF&amp;quot;, &amp;quot;#70D1FE&amp;quot;, &amp;quot;#D6E69F&amp;quot;,  &amp;quot;#F14E28&amp;quot;,&amp;quot;#009DDC&amp;quot;, &amp;quot;#F05E2F&amp;quot;, &amp;quot;#70D1FE&amp;quot;)) +
    theme_classic() +
  theme(panel.background = element_rect(fill = &amp;quot;#f1919d&amp;quot;)) +
  labs(title = &amp;quot;Heights of the Simpsons family&amp;quot;, x = &amp;quot;&amp;quot;, y = &amp;quot;Height (cm)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-02-13-jellybean-mistakes-2-barplots_files/figure-html/simpsons-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Shiny Website for Primer Documentation</title>
      <link>/post/shiny-website-for-primer-documentation/</link>
      <pubDate>Tue, 07 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/shiny-website-for-primer-documentation/</guid>
      <description>&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/vis/vis.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/vis/vis.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/visNetwork-binding/visNetwork.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;I am working in a relatively big molecular biology laboratory where sometimes the common stocks and orders documentation can be a hassle. Recently I ran into one of this problem and decided to change the way to maintain a documentation of our oligonucleotide storage.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;If you are not familiar with the term &lt;a href=&#34;https://en.wikipedia.org/wiki/Primer_(molecular_biology)&#34;&gt;&lt;em&gt;primer&lt;/em&gt;&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Oligonucleotide&#34;&gt;&lt;em&gt;oligonicleotide&lt;/em&gt;&lt;/a&gt;, start on Wikipedia.&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;Since we keep track every single ordered oligonucleotide this laboratory ordered, now there are more then 10.000 records. Until now they deployed to a shared Excel file on a common server. There was several problem with this method, let me highlight a few:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You have to manually add the unique identifier for the tube (a number, indicating the location to be stored). It resulted duplicated, skipped and even mistyped IDs.&lt;/li&gt;
&lt;li&gt;You have to write the sequence manually or with Copy-Paste.&lt;/li&gt;
&lt;li&gt;You can write any silly abbreviation for your name. Also can cause unidentifiable authors or authors with several types of entry names.&lt;/li&gt;
&lt;li&gt;If someone left it open on their machine, others cannot edit until it is not closed.&lt;/li&gt;
&lt;li&gt;Difficult to run BLAST. If a lab already has 10.000+ primers, sometimes you just look up what you need instead of ordering new ones. &lt;a href=&#34;https://blast.ncbi.nlm.nih.gov/Blast.cgi&#34;&gt;BLAST&lt;/a&gt; can do this job, but it is not so convenient to update a local BLAST database from excel every time someone deploy some new records (a few times a day).&lt;/li&gt;
&lt;li&gt;It is Excel.&lt;/li&gt;
&lt;li&gt;Again. It is Excel. Anyone easily could delete a few lines or even the whole document. No authorized access for any type of editing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Considering these, I decided to create a &lt;a href=&#34;http://shiny.rstudio.com&#34;&gt;Shiny&lt;/a&gt; webpage on our local server to automatically maintain and protect this database with some extra function and a highly user-friendly interface. I also would be able to distribute a backbone from this site on github if anyone has similar problems or just wants to use. Since this is a bigger project to put in one post and also some part is highly personalized to our laboratory, I will cover only some important parts, like some specific plotting and data processing, how to build up a shiny app within several posts.&lt;/p&gt;
&lt;div id=&#34;the-basic-ideas-behind-the-webpage&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The basic ideas behind the webpage&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;I would like to store the primer information in a database instead of a &lt;code&gt;.csv&lt;/code&gt; or &lt;code&gt;.xls&lt;/code&gt; file. My main candidates for this is &lt;a href=&#34;https://www.postgresql.org&#34;&gt;postgreSQL&lt;/a&gt; or &lt;a href=&#34;https://www.sqlite.org&#34;&gt;SQLite&lt;/a&gt;, but it could be changed freely later.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I want an interface where people can deploy primers even by manually or uploading a file (which is usually provided by the company we order from). This also should auto generate the unique IDs for the tubes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ability to build a BLAST database from the database (probably through a &lt;code&gt;.fasta&lt;/code&gt; file). This also should be triggered every time when new records are submitted (e.g. by button press or by monitoring the database time stamp).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ability to access the server’s BLAST engine from R/Shiny and to process the output in real time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A view window for browsing among existing primers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Following up on availability of the primer. If someone finished a tube, make it possible to indicate it with also a possible reordering option and connecting the unique IDs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Overcome all of the cons mentioned above.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here is a diagram (created with the &lt;a href=&#34;http://rich-iannone.github.io/DiagrammeR/&#34;&gt;DiagrammeR&lt;/a&gt; package) about the core ideas:&lt;/p&gt;
&lt;div id=&#34;htmlwidget-c990278410b71d556446&#34; style=&#34;width:672px;height:480px;&#34; class=&#34;visNetwork html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-c990278410b71d556446&#34;&gt;{&#34;x&#34;:{&#34;nodes&#34;:{&#34;id&#34;:[1,2,3,4,5,6,7],&#34;group&#34;:[&#34;A&#34;,&#34;A&#34;,&#34;A&#34;,&#34;A&#34;,&#34;A&#34;,&#34;A&#34;,&#34;B&#34;],&#34;label&#34;:[&#34;Primer Data Table \n (postgreSQL/\nSQLite)&#34;,&#34;New primer input&#34;,&#34;Create .fasta&#34;,&#34;Update blast database&#34;,&#34;BLAST search input&#34;,&#34;BLAST search output&#34;,&#34;Update&#34;],&#34;shape&#34;:[&#34;database&#34;,&#34;ellipse&#34;,&#34;box&#34;,&#34;box&#34;,&#34;ellipse&#34;,&#34;ellipse&#34;,&#34;circle&#34;],&#34;style&#34;:[&#34;filled&#34;,&#34;filled&#34;,&#34;filled&#34;,&#34;filled&#34;,&#34;filled&#34;,&#34;filled&#34;,&#34;filled&#34;],&#34;color&#34;:[&#34;limegreen&#34;,&#34;orange&#34;,&#34;dodgerblue&#34;,&#34;dodgerblue&#34;,&#34;orange&#34;,&#34;orange&#34;,&#34;pink&#34;],&#34;font.size&#34;:[20,20,20,20,20,20,20],&#34;shadow.enabled&#34;:[true,true,true,true,true,true,true],&#34;shadow.size&#34;:[10,10,10,10,10,10,10],&#34;shadow...&#34;:[&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;],&#34;shadow....1&#34;:[&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;],&#34;shadow....2&#34;:[&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;],&#34;shadow....3&#34;:[&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;],&#34;shadow....4&#34;:[&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;],&#34;smooth&#34;:[true,true,true,true,true,true,true],&#34;level&#34;:[1,4,2,2,4,4,3]},&#34;edges&#34;:{&#34;id&#34;:[1,2,3,4,5,6,7,8],&#34;from&#34;:[2,2,1,7,7,3,5,4],&#34;to&#34;:[1,7,3,3,4,4,4,6],&#34;label&#34;:[&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;]},&#34;nodesToDataframe&#34;:true,&#34;edgesToDataframe&#34;:true,&#34;options&#34;:{&#34;width&#34;:&#34;100%&#34;,&#34;height&#34;:&#34;100%&#34;,&#34;nodes&#34;:{&#34;shape&#34;:&#34;dot&#34;},&#34;manipulation&#34;:{&#34;enabled&#34;:false},&#34;edges&#34;:{&#34;arrows&#34;:{&#34;to&#34;:{&#34;enabled&#34;:true,&#34;scaleFactor&#34;:1}}},&#34;physics&#34;:{&#34;stabilization&#34;:{&#34;enabled&#34;:true,&#34;onlyDynamicEdges&#34;:false,&#34;fit&#34;:true}},&#34;layout&#34;:{&#34;improvedLayout&#34;:true,&#34;hierarchical&#34;:{&#34;enabled&#34;:true,&#34;levelSeparation&#34;:270,&#34;direction&#34;:&#34;LR&#34;,&#34;sortMethod&#34;:&#34;directed&#34;}}},&#34;groups&#34;:[&#34;A&#34;,&#34;B&#34;],&#34;width&#34;:null,&#34;height&#34;:null,&#34;idselection&#34;:{&#34;enabled&#34;:false},&#34;byselection&#34;:{&#34;enabled&#34;:false},&#34;main&#34;:null,&#34;submain&#34;:null,&#34;footer&#34;:null},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;extra-functions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Extra functions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Create new primers using &lt;a href=&#34;http://primer3.ut.ee&#34;&gt;Primer3&lt;/a&gt; (and BLAST) in-app. For this, we have to manipulate the UNIX command line application from R. Luckily it is not so difficult.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Extending this possibility we can even search for gRNAs for our CRISPR experiments with non-model genomes we work with. And also just for keep everything nicely in one place.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In the next post I would like to show how to recreate an interactive graphical output from a BLAST search result, similar as you can see on the &lt;a href=&#34;https://blast.ncbi.nlm.nih.gov/Blast.cgi&#34;&gt;BLAST&lt;/a&gt; website after performing a search.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Starting with blogdown</title>
      <link>/post/starting-with-blogdown/</link>
      <pubDate>Tue, 07 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/starting-with-blogdown/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;
&lt;p&gt;So it started… again. This is not my first attempt to create a blog for data science and R, but previously I was trying with &lt;a href=&#34;https://jekyllrb.com&#34;&gt;Jekyll pages&lt;/a&gt;. It looked very nice after the long struggle of setups, I was very happy with it. I used to post my R class presentations there for easy access to attendees.&lt;/p&gt;
&lt;p&gt;There was only one very bothering thing, there was no possibility to use R markdown directly, I always had to transfer to .md files, dealing with static images and so. Since I use &lt;a href=&#34;https://www.rstudio.com&#34;&gt;RStudio&lt;/a&gt; continuously to my work, I decided to try &lt;a href=&#34;https://yihui.name&#34;&gt;Yihui Xie’s&lt;/a&gt; &lt;code&gt;blogdown&lt;/code&gt; package with Hugo. I have to say, the installation was very seamless, just a few lines of code in R and a little git and viola, it works.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::install_github(&amp;#39;rstudio/blogdown&amp;#39;)
blogdown::install_hugo()
blogdown::new_site()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Generally that’s all to initialize a blog. Of course there is much more to do, you have to choose your theme, configure the &lt;code&gt;config.toml&lt;/code&gt; file, creating a github repository (if you wish to use github pages) and so on. If you really interested to make your own blog with Hugo and Blogdown, I can recommend &lt;a href=&#34;https://proquestionasker.github.io/blog/Making_Site/&#34;&gt;this&lt;/a&gt; post from Amber Thomas, which was really helpful for me.&lt;/p&gt;
&lt;p&gt;Also check &lt;a href=&#34;https://yihui.name&#34;&gt;Yihui Xie&lt;/a&gt; and his &lt;a href=&#34;https://github.com/yihui/&#34;&gt;github repos&lt;/a&gt;, like &lt;code&gt;knit&lt;/code&gt;, &lt;code&gt;bookdown&lt;/code&gt; and &lt;code&gt;xaringan&lt;/code&gt;. If you are documenting your research/analysis, making a book, presentation or a blog, these can be very handy. He also writes a &lt;a href=&#34;https://bookdown.org/yihui/blogdown/&#34;&gt;book on blogdown&lt;/a&gt;, however this is far from finished.&lt;/p&gt;
&lt;p&gt;Also from now I would like to focus on more detailed data science workflows, especially used in biology, instead of starting from the the very basics of R. See you soon in the next posts!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
